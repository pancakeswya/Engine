#include "backend/vk/renderer/shader.h"

#include <cstring>
#include <utility>

#include <shaderc/shaderc.hpp>

#include "backend/vk/renderer/error.h"

namespace vk {

namespace {

std::vector<uint32_t> CompileToSpv(const shaderc::Compiler& compiler, shaderc_shader_kind kind, const char* shader_code) {
  const shaderc::SpvCompilationResult module = compiler.CompileGlslToSpv(shader_code, strlen(shader_code), kind, "source");
  if (module.GetCompilationStatus() != shaderc_compilation_status_success) {
    throw Error("failed to compile shaders: " + module.GetErrorMessage());
  }
  return {module.cbegin(), module.cend()};
}

} // namespace

std::vector<ShaderInfo> Shader::GetInfos() {
  shaderc::Compiler compiler;
  return {
    {
      ShaderDescription{VK_SHADER_STAGE_VERTEX_BIT, "main"},
       CompileToSpv(
         compiler,
         shaderc_vertex_shader,
         R"(@simple.vert@)")
    },
    {
      ShaderDescription{VK_SHADER_STAGE_FRAGMENT_BIT, "main"},
      CompileToSpv(
        compiler,
        shaderc_fragment_shader,
        R"(@simple.frag@)")
    }
  };
}

} // namespace vk